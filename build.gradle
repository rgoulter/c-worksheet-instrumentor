 buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'net.sf.proguard', name: 'proguard-gradle', version: '6.0.3'
    }
}

plugins {
  id 'java'
  id 'scala'
  id 'eclipse'
  id 'application'
  id 'osgi'
  id 'me.champeau.gradle.antlr4' version '0.1'
  id 'com.github.maiflai.scalatest' version '0.23'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

// Could alternatively set in gradle.properties,
// cf. http://stackoverflow.com/questions/17262856/gradle-how-to-set-the-project-name-group-version-plus-source-targetcompatibi
group = "edu.nus"
archivesBaseName = "worksheetify.instrumentor"
version = "0.2.6-SNAPSHOT"

mainClassName = 'edu.nus.worksheet.Worksheetify'

repositories {
    jcenter()
}

dependencies {
    compile 'org.scala-lang:scala-library:2.11.6'
    compile 'io.argonaut:argonaut_2.11:6.0.4'

    // Runtime only needs antlr4-runtime, not the whole antlr4.
    compile 'org.antlr:antlr4-runtime:4.5'
    compile 'org.antlr:ST4:4.0.8'

    testCompile 'org.scalatest:scalatest_2.11:3.0.1'
    testRuntime 'org.pegdown:pegdown:1.1.0'

    // Customise antlr4 version, for buildscript
    antlr4 'org.antlr:antlr4:4.5'
}

// Have Gradle/Antlr4 use the same output folder as Maven
// so that it plays nicely with Eclipse.
String antlrPackage = 'edu.nus.worksheet.instrumentor'
String antlrOutputRoot = 'target/generated-sources/antlr4/'
String antlrOutput = antlrOutputRoot + antlrPackage.replace('.', "/")
antlr4.output = file(antlrOutput)

antlr4.extraArgs = ['-package', antlrPackage]

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += file(antlrOutputRoot)

test {
    maxParallelForks = 1
}

jar {
  manifest {
    name = "Worksheetify Instrumentor"
    attributes("Bundle-Version": "0.1.0.qualifier",

              // BND doesn't recognise our 'templates'
              // resource as worth exporting.
              // Manually set Export-Package.
              "Export-Package": "edu.nus.worksheet, edu.nus.worksheet.instrumentor, edu.nus.worksheet.instrumentor.templates")
  }
}

task moreStartScripts(type: CreateStartScripts) {
    mainClassName = "edu.nus.worksheet.WorksheetifyServer"
    applicationName = "c-worksheetify-server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(moreStartScripts)
    fileMode = 0755
}

task proguardJar(type: proguard.gradle.ProGuardTask) {
    // Use the jar from shadowJar as input to Proguard;
    // this helps avoid problem of duplicate class definitions from dependencies.
    shadowJar.outputs.files.getFiles().each {
        String jarPath = it.getPath();
        injars jarPath
    }

    // Output jar into buildDir/libs/
    // I'm not sure if "libs" is magic.
    outjars     new File(project.buildDir, "libs/$archivesBaseName-$version-min.jar")
    configuration "worksheet.pro"
}

proguardJar.dependsOn(shadowJar)

task proguardStartScripts(type: CreateStartScripts) {
    mainClassName = "edu.nus.worksheet.Worksheetify"
    applicationName = "c-worksheetify"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = proguardJar.outputs.files
}

task proguardServerStartScripts(type: CreateStartScripts) {
    mainClassName = "edu.nus.worksheet.WorksheetifyServer"
    applicationName = "c-worksheetify-server"
    outputDir = new File(project.buildDir, 'scripts')
    classpath = proguardJar.outputs.files
}

// A distribution using the shrunk/obfuscated/optimised Jar.
distributions {
    proguard {
        baseName = 'cworksheet-proguard'
        contents {
            from(proguardStartScripts) {
                into "bin"
            }
            from(proguardServerStartScripts) {
                into "bin"
            }
            from(proguardJar) {
                into "lib"
            }
        }
    }
}
