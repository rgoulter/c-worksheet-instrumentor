delimiters "$", "$"


primitiveFormatSpecifiers ::= [
  "char":"%c",
  "char *":"%s",
  "short":"%hd",
  "int":"%d",
  "long":"%ld",
  "float":"%g",
  "double":"%g",
  default: "%d" // probably anything else is int type?
]


// What headers may be needed;
// to be inserted at the beginning of the instrumented file.
preamble() ::= <<
$["stdio.h", "stdlib.h", "string.h", "setjmp.h", "signal.h"]:{header |#include <$header$>
}$
#ifndef WORKSHEET_MAX_ITERATIONS
#define WORKSHEET_MAX_ITERATIONS 1000
#endif
static jmp_buf __ws_buf;
static void catch_function(int signo) {
    longjmp(__ws_buf,1);
}
>>


segfaultGuard() ::= <<
if (setjmp(__ws_buf)) { // ASSUME setjmp buf is `buf`.
    printf("SEGFAULT\\n");
    exit(EXIT_SUCCESS);
}
if (signal(SIGSEGV, catch_function) == SIG_ERR) {
    fputs("An error occurred while setting a signal handler.\n", stderr);
    exit(EXIT_FAILURE);
}
>>


// Looks something like:
//   printf("WORKSHEET1234 { \"key1\": value1 }", arg1, arg2);
// for the worksheet (guest -> host) directives.
//
// NOTE: values won't be wrapped with \\"\\" here, so must do that
//       BEFORE passing to template.
wsDirectivePrintf(nonce, keys, values, args) ::= <<
printf("WORKSHEET$nonce$ { $keys, values : {k,v| \\"$k$\\": $v$}; separator=", "$ }\\n"$args:{a|,$a$}$);
>>


// buf has ptr, len, offset
declaration(buf, initLength = "8") ::= <<
int $buf.offset$ = 0, $buf.len$ = $initLength$;
char * $buf.ptr$ = (char*) malloc($buf.len$ * sizeof(char));
>>


checksize(buf, n) ::= <<
while (($buf.len$ - $buf.offset$) < $n$) {
    $buf.len$ *= 2;
    $buf.ptr$ = (char*) realloc($buf.ptr$, $buf.len$ * sizeof(char));
}
>>


append(buf, str) ::= <<
$checksize(buf, strlen(str))$
strcpy($buf.ptr$ + $buf.offset$, $str$);
$buf.offset$ += strlen($str$);
>>

// For ST objects
// Assumes has quotes already.
append_st(buf, str) ::= <<
{
  int __ws_len = strlen($str$);
  $checksize(buf, "__ws_len")$
  strcpy($buf.ptr$ + $buf.offset$, $str$);
  $buf.offset$ += __ws_len;
}
>>

quote(x) ::= "\"$x$\""


output(buf, T) ::= "$(T.template)(buf, T)$"


// TODO: %d works only for ints; what about for other types? ST4's dictionary?
//       is Scala able to generate consistent types for anything we may want?
output_primitive(buf, T) ::= <<
{
  int __ws_n = snprintf(NULL, 0, "$primitiveFormatSpecifiers.(T.ctype)$", $T.id$); // Check
  $checksize(buf, "__ws_n")$
  sprintf($buf.ptr$ + $buf.offset$, "$primitiveFormatSpecifiers.(T.ctype)$", $T.id$); // Output Prim
  $buf.offset$ += __ws_n;
}
>>


output_pointer(buf, T) ::= <<
{
  int __ws_n = snprintf(NULL, 0, "%p", (void*)$T.id$);
  $checksize(buf, "__ws_n")$
  sprintf($buf.ptr$, "%p", (void*)$T.id$);
  $buf.offset$ += __ws_n;

  int __ws_tryOffset = $buf.offset$;
  if (!setjmp(__ws_buf)) {
    $! `T.of.index -> T.of.n` because Array types may not be complete. !$
    $if(T.of && (!T.of.index || T.of.n))$
    $append(buf, "\" = \"")$
    $output(buf, T.of)$
    $endif$
  } else {
    $buf.offset$ = __ws_tryOffset; // Dereference failed; go back.
    $buf.ptr$[$buf.offset$] = '\0';
  }
}
>>


output_array(buf, T) ::= <<
{
    // Array length for this array dimension.
    int __ws_arrLength = sizeof ($T.id$) / sizeof ($T.id$[0]);

    $append(buf, "\"[\"")$
    for (int $T.index$ = 0; $T.index$ < __ws_arrLength; $T.index$++) {
        if ($T.index$ > 0) {
            $append(buf, "\", \"")$
        }

        $output(buf, T.of)$
    }
    $append(buf, "\"]\"")$
}
>>

output_struct(buf, T) ::= <<
$append(buf, "\"{\"")$
  $T.members.keys, T.members.values : {mId, m |
$append_st(buf, quote(mId))$;
$append(buf, "\" = \"")$;
$output(buf, m)$
}; separator=append(buf, "\", \"")$
$append(buf, "\"}\"")$
>>


// output the constant text, not the value.
// e.g. FOO of enum { FOO, BAR }.
output_enum(buf, T) ::= <<
switch($T.id$) {
$T.constants:{c|  case $c$:
  $append_st(buf, quote(c))$
  break;
}$
}
>>


// output the name of the function
output_function(buf, T) ::= <<
$T.id:{c| $append_st(buf, quote(c))$
}$
>>


// output the constant text, not the value.
// e.g. FOO of enum { FOO, BAR }.
output_noop(buf, T) ::= <<
>>